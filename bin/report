#!/usr/bin/env perl

=head1 NAME

report - Create QIC target files from site data

=head1 USAGE

 report --sitename :site: --surveyname :surveyname:

=cut

use strict;
use warnings;
use FindBin;
use lib "$FindBin::Bin/../lib";
use Getopt::Long;
use Pod::Usage;
use JSON;
use Text::CSV_XS;
use Data::Dump qw( dump );
use File::Slurper qw( read_text write_text read_binary );
use Config::YAML;

use QIC::Case;

my $CONFIG = Config::YAML->new( config => "$FindBin::Bin/../config.yml" );

GetOptions( $CONFIG, 'help', 'sitename=s', 'surveyname=s' )
    or pod2usage(2);

#dump $CONFIG;

if (   $CONFIG->{help}
    || !$CONFIG->{sitename}
    || !$CONFIG->{surveyname} )
{
    pod2usage(2);
}

if ( !$CONFIG->{ $CONFIG->{sitename} } ) {
    die "Invalid sitename (check config.yml): $CONFIG->{sitename}";
}

my $SITE_CONFIG = $CONFIG->{ $CONFIG->{sitename} };
my $now         = DateTime->now->set_time_zone('America/Chicago');
my $ymd         = $now->ymd('');
my $hms         = $now->hms('');
my $TARGET_FILE = join( "-", $ymd, $hms, $CONFIG->{sitename}, "target.csv" );

my $CSV_HEADER = [
    qw(
        case_id
        site_name
        site_office_name
        survey_number
        case_worker_id
        case_worker_first_name
        case_worker_last_name
        case_worker_email
        focal_child_id
        focal_child_first_name
        focal_child_last_name
        focal_child_dob
        )
];

# create N cells for children and adults
for my $n ( 1 .. 20 ) {
    push @$CSV_HEADER, "child_${n}_id";
    push @$CSV_HEADER, "child_${n}_first_name";
    push @$CSV_HEADER, "child_${n}_last_name";
    push @$CSV_HEADER, "child_${n}_dob";
}

for my $n ( 1 .. 9 ) {
    push @$CSV_HEADER, "adult_${n}_role";
    push @$CSV_HEADER, "adult_${n}_id";
    push @$CSV_HEADER, "adult_${n}_first_name";
    push @$CSV_HEADER, "adult_${n}_last_name";
    push @$CSV_HEADER, "adult_${n}_dob";
    push @$CSV_HEADER, "adult_${n}_street_one";
    push @$CSV_HEADER, "adult_${n}_street_two";
    push @$CSV_HEADER, "adult_${n}_city";
    push @$CSV_HEADER, "adult_${n}_state";
    push @$CSV_HEADER, "adult_${n}_zipcode";
    push @$CSV_HEADER, "adult_${n}_phone";
    push @$CSV_HEADER, "adult_${n}_email";
}

my $workers = QIC::CaseWorker->fetch_all(
    require_objects => ['cases'],
    query           => [ 'cases.surveyed_at' => undef ],
    sort_by         => 'id'
);

printf "Found %s case workers with unsurveyed cases\n", scalar(@$workers);

# create the report
my $csv = Text::CSV_XS->new( { binary => 1, eol => $/, auto_diag => 1, } );
$csv->column_names($CSV_HEADER);
open my $fh, ">:encoding(utf8)", $TARGET_FILE or die "$TARGET_FILE: $!";
$csv->print( $fh, $CSV_HEADER );

my $num_rows     = 0;
my $max_children = 0;
my $max_adults   = 0;
for my $worker (@$workers) {
    next unless $worker->has_related('cases');

    my $cases
        = $SITE_CONFIG->{cases_per_worker} eq '-1'
        ? $worker->eligible_cases
        : $worker->random_cases( $CONFIG->{cases_per_worker} );

    for my $case (@$cases) {
        next unless $case;

        my $num_adults = scalar( @{ $case->adults_sorted } );
        my $num_pfc    = scalar( @{ $case->potential_focal_children } );

        $max_adults   = $num_adults if $num_adults > $max_adults;
        $max_children = $num_pfc    if $num_pfc > $max_children;

#        printf "Random case for worker %s: %s\n", $worker_id, dump($case->as_tree);
#        printf "Focal child: %s\n", dump( $case->focal_child->as_tree );

        $case->surveyed_at($now);
        $case->survey_name( $CONFIG->{surveyname} );

        $csv->print_hr( $fh, $case->as_csv_row );
        $num_rows++;

        $case->save();
    }
}
close $fh or die "$TARGET_FILE: $!";
printf "Wrote %s rows to %s\n", $num_rows, $TARGET_FILE;
printf "Max potential focal children seen on a single case: %s\n",
    $max_children;
printf "Max adults seen on a single case: %s\n", $max_adults;
