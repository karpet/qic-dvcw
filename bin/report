#!/usr/bin/env perl

=head1 NAME

report - Create QIC target files from site data

=head1 USAGE

 report --sitename :site: [--replacements :file-of-emails:] [--dry_run]

=cut

use strict;
use warnings;
use FindBin;
use lib "$FindBin::Bin/../lib";
use Getopt::Long;
use Pod::Usage;
use JSON;
use Text::CSV_XS qw( csv );
use Data::Dump qw( dump );
use File::Slurper qw( read_lines );
use Config::YAML;

use QIC::Case;

my $CONFIG = Config::YAML->new( config => "$FindBin::Bin/../config.yml" );

GetOptions( $CONFIG, 'help', 'sitename=s', 'dry_run', 'replacements=s' )
    or pod2usage(2);

#dump $CONFIG;

if ( $CONFIG->{help}
    || !$CONFIG->{sitename} )
{
    pod2usage(2);
}

if ( !$CONFIG->{ $CONFIG->{sitename} } ) {
    die "Invalid sitename (check config.yml): $CONFIG->{sitename}";
}

my $SITE_CONFIG = $CONFIG->{ $CONFIG->{sitename} };
my $now         = DateTime->now->set_time_zone('America/Chicago');
my $ymd         = $now->ymd('');
my $hms         = $now->hms('');
my $target_type = $CONFIG->{dry_run} ? 'dry-run' : 'target';
$target_type = 'replacements' if $CONFIG->{replacements};
my $TARGET_FILE
    = join( "-", $ymd, $hms, $CONFIG->{sitename}, "${target_type}.csv" );
my $REPLACEMENTS
    = $CONFIG->{replacements}
    ? csv( in => $CONFIG->{replacements}, headers => "auto" )
    : [];

# explicit list of caseworkers to use in target file.
# one case per email instance in the replacements file.
my %safelist_caseworkers = ();
for my $line (@$REPLACEMENTS) {
    my $email = $line->{email};
    $safelist_caseworkers{$email}++;
}

my $CSV_HEADER = [
    qw(
        case_id
        site_name
        site_office_name
        survey_number
        case_worker_id
        case_worker_first_name
        case_worker_last_name
        email
        focal_child_id
        focal_child_first_name
        focal_child_last_name
        focal_child_dob
        )
];

# create N cells for children and adults
for my $n ( 1 .. 20 ) {
    push @$CSV_HEADER, "child_${n}_id";
    push @$CSV_HEADER, "child_${n}_first_name";
    push @$CSV_HEADER, "child_${n}_last_name";
    push @$CSV_HEADER, "child_${n}_dob";
}

for my $n ( 1 .. 9 ) {
    push @$CSV_HEADER, "adult_${n}_role";
    push @$CSV_HEADER, "adult_${n}_id";
    push @$CSV_HEADER, "adult_${n}_first_name";
    push @$CSV_HEADER, "adult_${n}_last_name";
    push @$CSV_HEADER, "adult_${n}_dob";
    push @$CSV_HEADER, "adult_${n}_street_one";
    push @$CSV_HEADER, "adult_${n}_street_two";
    push @$CSV_HEADER, "adult_${n}_city";
    push @$CSV_HEADER, "adult_${n}_state";
    push @$CSV_HEADER, "adult_${n}_zipcode";
    push @$CSV_HEADER, "adult_${n}_phone";
    push @$CSV_HEADER, "adult_${n}_email";
}

my $workers;
if ( keys %safelist_caseworkers ) {
    $workers = QIC::CaseWorker->fetch_all(
        require_objects => ['cases'],
        query           => [
            site_name           => $CONFIG->{sitename},
            'cases.surveyed_at' => undef,
            'cases.closed_at'   => undef,
            email               => [ sort keys %safelist_caseworkers ],
        ],
        sort_by => 'id'
    );

}
else {
    $workers = QIC::CaseWorker->fetch_all(
        require_objects => ['cases'],
        query           => [
            site_name           => $CONFIG->{sitename},
            'cases.surveyed_at' => undef,
            'cases.closed_at'   => undef,
        ],
        sort_by => 'id'
    );
}

printf "Found %s case workers with unsurveyed cases\n", scalar(@$workers);

if ( !$CONFIG->{dry_run} ) {

    # make a backup before we write to the file, in case we need to rollback
    QIC::DB->backup;
}

# create the report
my $csv = Text::CSV_XS->new( { binary => 1, eol => $/, auto_diag => 1, } );
$csv->column_names($CSV_HEADER);
open my $fh, ">:encoding(utf8)", $TARGET_FILE or die "$TARGET_FILE: $!";
$csv->print( $fh, $CSV_HEADER );

my $num_rows         = 0;
my $max_children     = 0;
my $max_adults       = 0;
my %seen_replacement = ();
WORKER: for my $worker (@$workers) {
    my $cases_per_worker = $safelist_caseworkers{ $worker->email }
        || $SITE_CONFIG->{cases_per_worker};
    my $is_replacement = exists $safelist_caseworkers{ $worker->email };
    my $use_random_cases = $is_replacement || ( $cases_per_worker > -1 );

    if ($is_replacement) {
        printf(
            "Worker %s, has %s total cases, %s surveyed, %s replaced\n",
            $worker->id,
            $worker->has_related('cases'),
            $worker->number_of_surveyed_cases,
            $worker->number_of_replaced_cases,
        );
    }

    next WORKER unless $worker->has_related('cases');

    my $cases
        = $use_random_cases
        ? $worker->random_cases($cases_per_worker)
        : $worker->eligible_cases;

    if ($is_replacement) {
        printf( "Worker %s, fetched %s new cases\n",
            $worker->id, scalar(@$cases) );
    }

#printf "found %s eligible cases for worker %s\n", scalar(@{ $worker->eligible_cases }), $worker->id;

CASE: for my $case (@$cases) {
        if ($is_replacement) {
            printf(
                "Worker %s has %s surveys out of %s eligible (%s total) cases, working on new case %s\n",
                $worker->id,
                $worker->number_of_surveys,
                scalar( @{ $worker->eligible_cases } ),
                $worker->has_related('cases'),
                $case->id
            );
        }

        next unless $case;

        next WORKER
            if $worker->number_of_surveys
            >= 10;    # max surveys over lifetime of project

        #printf "including case %s\n", dump($case->as_tree);

        my $num_adults = scalar( @{ $case->adults_sorted } );
        my $num_pfc    = scalar( @{ $case->potential_focal_children } );

        $max_adults   = $num_adults if $num_adults > $max_adults;
        $max_children = $num_pfc    if $num_pfc > $max_children;

#        printf "Random case for worker %s: %s\n", $worker_id, dump($case->as_tree);
#        printf "Focal child: %s\n", dump( $case->focal_child->as_tree );

        $case->surveyed_at($now);

        # survey_name depends on whether this is a replacement or not.
        my $survey_name = $case->next_survey_name;
        if ($is_replacement) {

            # find the first replacement row for this email
            # that we have not seen and re-use name.
            for my $r (@$REPLACEMENTS) {
                next if $r->{email} ne $worker->email;
                warn dump $r;
                next
                    if $seen_replacement{ $r->{email} }->{ $r->{survey_number} }++;
                $survey_name = $r->{survey_number};
                $survey_name =~ s/R//;
                last;
            }
        }
        $case->survey_name($survey_name);

        $csv->print_hr( $fh, $case->as_csv_row( $CONFIG->{replacements} ) );
        $num_rows++;

        $case->save() unless $CONFIG->{dry_run};
    }
}
close $fh or die "$TARGET_FILE: $!";
printf "Wrote %s rows to %s\n", $num_rows, $TARGET_FILE;
printf "Max potential focal children seen on a single case: %s\n",
    $max_children;
printf "Max adults seen on a single case: %s\n", $max_adults;
