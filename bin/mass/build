#!/usr/bin/env perl

use strict;
use warnings;
use JSON;
use Text::CSV_XS;
use Data::Dump qw( dump );
use File::Slurper qw( read_text write_text read_binary );

use FindBin;
use lib "$FindBin::Bin/../../lib";
use QIC::Case;
use QIC::CaseWorker;
use QIC::Adult;
use QIC::Child;

my $usage = "$0 datadir";
die $usage unless @ARGV;
my $DATA = shift(@ARGV);

#my $contact_file    = "$DATA/contacts.json";
#my $address_file    = "$DATA/address.json";
my $caseworker_file = "$DATA/case-workers.json";
my $client_file     = "$DATA/clients.json";
my $cases_file      = "$DATA/cases.json";

#my $contacts    = decode_json( read_text($contact_file) );
#my $addresses   = decode_json( read_text($address_file) );
#my $history     = decode_json( read_text($history_file) );
my $clients     = decode_json( read_binary($client_file) );
my $cases       = decode_json( read_binary($cases_file) );
my $caseworkers = decode_json( read_text($caseworker_file) );

# build out cases, adults, children
# clients are adults or children

my ( %cases, %case_workers, %adults, %childs );

{

    package TransformRole;
    use Moo::Role;

    sub transform {
        my $self = shift;
        return {%$self};
    }

}

{

    package Client;
    use Moo;

    with 'TransformRole';

    has [
        qw(
            sex
            dob
            case_id
            last_name
            middle_name
            first_name
            id
            is_child
            )
    ] => ( is => 'ro' );

    sub join_id {
        my $self = shift;
        return $self->case_id;
    }
}

{

    package Case;
    use Moo;

    with 'TransformRole';

    has [qw( id case_worker_id )] => ( is => 'ro' );
}

{

    package CaseWorker;
    use Moo;

    with 'TransformRole';

    has [qw( id first_name last_name email site_name site_office_name )] =>
        ( is => 'ro' );

}

sub clean_name {
    my $n = shift;
    $n =~ s/^\s+|\s+$//g;
    return $n;
}

sub parse_date_ymd {
    my $date = shift or return undef;

    my ( $year2, $month, $day )
        = ( $date =~ m,^(\d+)/(\d+)/(\d+), );    # "72/3/29"
    my $year = $year2 > 20 ? "19$year2" : "20$year2";
    $day   = "0$day"   if length($day) == 1;
    $month = "0$month" if length($month) == 1;
    return "$year-$month-$day";
}

sub consumer_to_client {
    my $consumer = shift;
    return Client->new(
        {   sex => $consumer->{"Birth Sex"},
            dob => parse_date_ymd(
                $consumer->{"Birthdate"} || $consumer->{"Birthdate "}
            ),    # extra space in header
            case_id     => $consumer->{"QIC Unique Case ID"},
            last_name   => $consumer->{"Last Name"},
            middle_name => $consumer->{"Middle Name"},
            first_name  => $consumer->{"First Name"},
            id          => $consumer->{"QIC Unique Person ID"},
            is_child    => (
                ( $consumer->{"Role Type"} || "adult" ) eq "Consumer Child"
            ),
        }
    );
}

sub case_to_case {
    my $case = shift;
    return Case->new(
        {   id             => $case->{"QIC Case ID"},
            case_worker_id => $case->{"QIC Employee ID"},
        }
    );
}

sub case_worker_to_case_worker {
    my $cw = shift;
    return CaseWorker->new(
        {   id               => $cw->{"Unique Employee ID"},
            first_name       => $cw->{"First Name"},
            last_name        => $cw->{"Last Name"},
            site_office_name => $cw->{"Area Office"},
        }
    );
}

sub case_address_to_adult {
    my ( $case_rec, $adult_rec ) = @_;

    # e.g. "147 Rangeway Road, Unit 3110, Billerica, MA 01862"
    my @addr = split( ", ", $case_rec->{"Best Address for Case"} );
    my $parts = scalar(@addr);
    if ( $parts == 4 ) {
        $adult_rec->{address_one} = $addr[0];
        $adult_rec->{address_two} = $addr[1];
        $adult_rec->{city}        = $addr[2];
        ( $adult_rec->{state} )   = ( $addr[3] =~ m/^(\w\w)/ );
        ( $adult_rec->{zipcode} ) = ( $addr[3] =~ m/(\d\d\d\d\d)$/ );
    }
    else {
        $adult_rec->{address_one} = $addr[0];
        $adult_rec->{city}        = $addr[1];
        ( $adult_rec->{state} )   = ( $addr[2] =~ m/^(\w\w)/ );
        ( $adult_rec->{zipcode} ) = ( $addr[2] =~ m/(\d\d\d\d\d)$/ );
    }
}

# build adults and children
my $adult_count = 0;
my $child_count = 0;

my %clients_by_join_id = ();

print "Found " . scalar(@$clients) . " clients\n";
for my $client_hash (@$clients) {
    my $client = consumer_to_client($client_hash);

    next unless $client->id;

    if ( !$client->is_child ) {
        $adult_count++;
        $adults{ $client->join_id } = $client->transform;
        push @{ $clients_by_join_id{ $client->join_id } }, $client->id;
    }
    elsif ( $client->is_child ) {
        $child_count++;
        $childs{ $client->join_id } = $client->transform;
        push @{ $clients_by_join_id{ $client->join_id } }, $client->id;
    }
}

# build cases
print "Found " . scalar(@$cases) . " cases\n";
my $case_count = 0;
for my $case_hash (@$cases) {
    my $case = case_to_case($case_hash);

    # skip nonsense
    next unless $case->id;

    # count processed (we will skip some that don't have emails)
    $case_count++;

    $cases{ $case->id } = $case->transform;

    # TODO address is on case
    case_address_to_adult( $case_hash, $adults{ $case->id } );
}

# case workers
printf "Found %s case workers\n", scalar(@$caseworkers);
my $case_worker_count = 0;
for my $cw_hash (@$caseworkers) {
    my $case_worker = case_worker_to_case_worker($cw_hash);

    next unless $case_worker->id;

    $case_worker_count++;

    $case_workers{ $case_worker->id } = $case_worker->transform;
}

# write out denormalized
write_text( "$DATA/adults-out.json",       encode_json( \%adults ) );
write_text( "$DATA/children-out.json",     encode_json( \%childs ) );
write_text( "$DATA/cases-out.json",        encode_json( \%cases ) );
write_text( "$DATA/case_workers-out.json", encode_json( \%case_workers ) );

printf "Processed %s adult parents, wrote %s unique adults\n",
    $adult_count,
    scalar( keys %adults );

printf "Processed %s children, wrote %s unique children\n",
    $child_count,
    scalar( keys %childs );

printf "Processed %s cases, wrote %s cases\n",
    $case_count,
    scalar( keys %cases );

printf "Processed %s case workers, wrote %s case workers\n",
    $case_worker_count,
    scalar( keys %case_workers );

# write to db
for my $cw_id ( keys %case_workers ) {
    my $cw_rec      = $case_workers{$cw_id};
    my $case_worker = QIC::CaseWorker->new(
        id               => $cw_id,
        first_name       => $cw_rec->{first_name},
        last_name        => $cw_rec->{last_name},
        email            => $cw_rec->{email},
        site_name        => 'mass',
        site_office_name => $cw_rec->{site_office_name},
    )->insert_or_update;
}

for my $case_id ( keys %cases ) {
    my $case_rec = $cases{$case_id};
    my $case     = QIC::Case->new(
        id             => $case_id,
        case_worker_id => $case_rec->{case_worker_id}
    )->insert_or_update;
}
my @adult_columns = QIC::Adult->meta->column_names;
for my $adult_id ( keys %adults ) {
    my $rec = $adults{$adult_id};
    my $adult = QIC::Adult->new( map { $_ => $rec->{$_} } @adult_columns )
        ->insert_or_update;
}
for my $child_id ( keys %childs ) {
    my $rec   = $childs{$child_id};
    my $child = QIC::Child->new(
        id         => $rec->{id},
        client_id  => $rec->{client_id},
        case_id    => $rec->{case_id},
        first_name => $rec->{first_name},
        last_name  => $rec->{last_name},
        dob        => $rec->{dob}
    )->insert_or_update;
}

dump \%clients_by_join_id;
