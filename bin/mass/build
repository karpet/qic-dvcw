#!/usr/bin/env perl

use strict;
use warnings;
use Data::Dump qw( dump );

use FindBin;
use lib "$FindBin::Bin/../../lib";
use QIC::Case;
use QIC::CaseWorker;
use QIC::Adult;
use QIC::Child;
use QIC::Utils
    qw( clean_name clean_phone clean_state clean_zip parse_date_ymd read_json write_json );

my $usage = "$0 datadir";
die $usage unless @ARGV;
my $DATA = shift(@ARGV);

my $caseworker_file       = "$DATA/case-workers.json";
my $client_file           = "$DATA/clients.json";
my $cases_file            = "$DATA/cases.json";
my $caseworker_email_file = "$DATA/mass-caseworker-emails.json";

my $clients           = read_json($client_file);
my $cases             = read_json($cases_file);
my $caseworkers       = read_json($caseworker_file);
my $caseworker_emails = read_json($caseworker_email_file);

# build out cases, adults, children
# clients are adults or children

my ( %cases, %case_workers, %adults, %childs );

{

    package TransformRole;
    use Moo::Role;

    sub transform {
        my $self = shift;
        return {%$self};
    }

}

{

    package Client;
    use Moo;

    with 'TransformRole';

    has [
        qw(
            sex
            role
            dob
            case_id
            last_name
            middle_name
            first_name
            id
            client_id
            is_child
            address_one
            address_two
            city
            state
            zipcode
            mobile_phone
            home_phone
            email
            )
    ] => ( is => 'ro' );

    sub join_id {
        my $self = shift;
        return $self->id;
    }
}

{

    package Case;
    use Moo;

    with 'TransformRole';

    has [qw( id case_worker_id closed )] => ( is => 'ro' );
}

{

    package CaseWorker;
    use Moo;

    with 'TransformRole';

    has [qw( id first_name last_name email site_name site_office_name )] =>
        ( is => 'ro' );

}

sub determine_role {
    my $consumer = shift;
    return undef
        unless $consumer->{"Role Type"}
        and $consumer->{"Role Type"} eq "Consumer Adult";
    return "Adult" unless $consumer->{"Gender Identity"};
    return "Father" if $consumer->{"Gender Identity"} eq "Male";
    return "Mother" if $consumer->{"Gender Identity"} eq "Female";
    return "Adult";
}

sub consumer_to_client {
    my $consumer = shift;
    return Client->new(
        {   sex => $consumer->{"Birth Sex"},
            dob => parse_date_ymd(
                $consumer->{"Birthdate"} || $consumer->{"Birthdate "}
            ),    # extra space in header
            case_id     => $consumer->{"QIC Unique Case ID"},
            last_name   => $consumer->{"Last Name"},
            middle_name => $consumer->{"Middle Name"},
            first_name  => $consumer->{"First Name"},
            id          => $consumer->{"QIC Unique Person ID"},
            client_id   => $consumer->{"QIC Unique Person ID"},
            role        => determine_role($consumer),
            is_child    => (
                ( $consumer->{"Role Type"} || "adult" ) eq "Consumer Child"
            ),
            address_one  => clean_name( $consumer->{"Home Address"} ),
            city         => clean_name( $consumer->{"Home City"} ),
            state        => clean_state( $consumer->{"State"} ),
            zipcode      => clean_zip( $consumer->{"Zip Code"} ),
            mobile_phone => clean_phone( $consumer->{"Phone Number 1"} ),
            home_phone   => clean_phone( $consumer->{"Phone Number 2"} ),
            email        => clean_name( $consumer->{"E-mail"} ),
        }
    );
}

sub case_to_case {
    my $case = shift;
    return Case->new(
        {   id             => $case->{"QIC Case ID"},
            case_worker_id => $case->{"QIC Employee ID"},
            closed         => $case->{"Case Close Date"},
        }
    );
}

sub case_worker_to_case_worker {
    my $cw = shift;
    return CaseWorker->new(
        {   id               => $cw->{"Unique Employee ID"},
            first_name       => $cw->{"First Name"},
            last_name        => $cw->{"Last Name"},
            site_office_name => $cw->{"Area Office"},
        }
    );
}

# build adults and children
my $adult_count = 0;
my $child_count = 0;

my %clients_by_join_id = ();

my %email_lookup = ();
for my $cwe (@$caseworker_emails) {
    next unless $cwe->{last_name};
    next unless $cwe->{status} eq "1 - active";

    my $key = lc( $cwe->{last_name} . '-' . $cwe->{first_name} );
    $email_lookup{$key} = $cwe->{email};
}

# case workers
printf "Found %s case workers\n", scalar(@$caseworkers);
my $case_worker_count = 0;
for my $cw_hash (@$caseworkers) {
    my $case_worker = case_worker_to_case_worker($cw_hash);

    next unless $case_worker->id;

    my $key = lc( $case_worker->last_name . '-' . $case_worker->first_name );

    my $email = $email_lookup{$key};

    if ( !$email ) {

        #  warn "no email for $key : " . dump($case_worker->transform);
        #printf "No email for %s %s\n", $case_worker->first_name,
        #    $case_worker->last_name;
        next;
    }

    $case_worker->{email} = $email;

    $case_worker_count++;

    $case_workers{ $case_worker->id } = $case_worker->transform;
}

# build cases
print "Found " . scalar(@$cases) . " cases\n";
my $case_count = 0;
for my $case_hash (@$cases) {
    my $case = case_to_case($case_hash);

    # skip nonsense
    next unless $case->id;
    next unless $case->case_worker_id;
    next if $case->closed;

    unless ( $case_workers{ $case->case_worker_id } ) {

        #warn "No case worker id found for " . dump($case_hash);
        next;
    }

    # count processed (we will skip some that don't have emails)
    $case_count++;

    $cases{ $case->id } = $case->transform;
}

print "Found " . scalar(@$clients) . " clients\n";
for my $client_hash (@$clients) {
    my $client = consumer_to_client($client_hash);

    next unless $client->id;

    next unless $cases{ $client->case_id };

    if ( !$client->is_child ) {
        $adult_count++;
        $adults{ $client->join_id } = $client->transform;
        push @{ $clients_by_join_id{ $client->join_id } }, $client->id;
    }
    elsif ( $client->is_child ) {
        $child_count++;
        $childs{ $client->join_id } = $client->transform;
        push @{ $clients_by_join_id{ $client->join_id } }, $client->id;
    }
}

# write out denormalized
write_json( "$DATA/adults-out.json",       \%adults );
write_json( "$DATA/children-out.json",     \%childs );
write_json( "$DATA/cases-out.json",        \%cases );
write_json( "$DATA/case_workers-out.json", \%case_workers );

printf "Processed %s adult parents, wrote %s unique adults\n",
    $adult_count,
    scalar( keys %adults );

printf "Processed %s children, wrote %s unique children\n",
    $child_count,
    scalar( keys %childs );

printf "Processed %s cases, wrote %s cases\n",
    $case_count,
    scalar( keys %cases );

printf "Processed %s case workers, wrote %s case workers\n",
    $case_worker_count,
    scalar( keys %case_workers );

# write to db
QIC::DB->backup;

for my $cw_id ( keys %case_workers ) {
    my $cw_rec      = $case_workers{$cw_id};
    my $case_worker = QIC::CaseWorker->new(
        id               => $cw_id,
        first_name       => $cw_rec->{first_name},
        last_name        => $cw_rec->{last_name},
        email            => $cw_rec->{email},
        site_name        => 'mass',
        site_office_name => $cw_rec->{site_office_name},
    )->insert_or_update;
}

for my $case_id ( keys %cases ) {
    my $case_rec = $cases{$case_id};
    my $case     = QIC::Case->new(
        id             => $case_id,
        case_worker_id => $case_rec->{case_worker_id}
    )->insert_or_update;
}
my @adult_columns = QIC::Adult->meta->column_names;
for my $adult_id ( keys %adults ) {
    my $rec = $adults{$adult_id};
    my $adult = QIC::Adult->new( map { $_ => $rec->{$_} } @adult_columns )
        ->insert_or_update;
}
for my $child_id ( keys %childs ) {
    my $rec   = $childs{$child_id};
    my $child = QIC::Child->new(
        id         => $rec->{id},
        client_id  => $rec->{client_id},
        case_id    => $rec->{case_id},
        first_name => $rec->{first_name},
        last_name  => $rec->{last_name},
        dob        => $rec->{dob}
    )->insert_or_update;
}

#dump \%clients_by_join_id;
