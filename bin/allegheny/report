#!/usr/bin/env perl

use strict;
use warnings;
use JSON;
use Text::CSV_XS;
use Data::Dump qw( dump );
use File::Slurper qw( read_text write_text read_binary );

my $CSV_HEADER = [
    qw(
        case_id
        site_name
        site_office_name
        survey_number
        case_worker_id
        case_worker_first_name
        case_worker_last_name
        case_worker_email
        focal_child_id
        focal_child_first_name
        focal_child_last_name
        focal_child_dob
        )
];

# create N cells for children and adults
for my $n ( 1 .. 20 ) {
    push @$CSV_HEADER, "child_${n}_id";
    push @$CSV_HEADER, "child_${n}_first_name";
    push @$CSV_HEADER, "child_${n}_last_name";
    push @$CSV_HEADER, "child_${n}_dob";
}

for my $n ( 1 .. 9 ) {
    push @$CSV_HEADER, "adult_${n}_role";
    push @$CSV_HEADER, "adult_${n}_id";
    push @$CSV_HEADER, "adult_${n}_first_name";
    push @$CSV_HEADER, "adult_${n}_last_name";
    push @$CSV_HEADER, "adult_${n}_dob";
    push @$CSV_HEADER, "adult_${n}_street_one";
    push @$CSV_HEADER, "adult_${n}_street_two";
    push @$CSV_HEADER, "adult_${n}_city";
    push @$CSV_HEADER, "adult_${n}_state";
    push @$CSV_HEADER, "adult_${n}_zipcode";
    push @$CSV_HEADER, "adult_${n}_phone";
    push @$CSV_HEADER, "adult_${n}_email";
}

my $usage       = "$0 datadir targetfile.csv";
my $DATA        = shift(@ARGV) or die $usage;
my $TARGET_FILE = shift(@ARGV) or die $usage;

my $cases    = decode_json( read_text("$DATA/cases.json") );
my $adults   = decode_json( read_text("$DATA/adults.json") );
my $children = decode_json( read_text("$DATA/children.json") );

{

    package Case;
    use Moo;
    use List::Util qw(shuffle);
    use Data::Dump qw( dump );

    has [
        qw(
            case_worker_email
            site_office_name
            case_worker_id
            case_worker_first_name
            case_id
            site_name
            case_worker_last_name
            survey_number
            )
    ] => ( is => 'ro' );

    has adults   => ( is => 'rw', default => sub { [] } );
    has children => ( is => 'rw', default => sub { [] } );
    has focal_child => (
        is      => 'rw',
        builder => 'build_focal_child',
        lazy    => 1,
    );

    sub has_adults   { scalar( @{ $_[0]->adults } ) }
    sub has_children { scalar( @{ $_[0]->children } ) }

    sub build_focal_child {
        my $self            = shift;
        my $pfc             = $self->potential_focal_children;
        my @between_5_and_9 = grep { $_->age >= 5 && $_->age <= 9 } @$pfc;
        my @tenyo           = grep { $_->age == 10 } @$pfc;
        my @under5          = grep { $_->age < 5 } @$pfc;

        #warn dump( \@between_5_and_9 );
        #warn dump( \@tenyo );
        #warn dump( \@under5 );
        #warn dump($pfc);

        return
               shuffle(@between_5_and_9)
            || shuffle(@tenyo)
            || shuffle(@under5)
            || shuffle(@$pfc);
    }

    sub worker_name {
        my $self = shift;
        return sprintf( "%s %s",
            $self->case_worker_first_name,
            $self->case_worker_last_name );
    }

    sub potential_focal_children {
        my $self = shift;
        return [ grep { $_->age < 11 } @{ $self->children } ];
    }

    sub as_csv_row {
        my $self = shift;

        my $row = {
            case_id                => $self->case_id,
            site_name              => $self->site_name,
            site_office_name       => $self->site_office_name,
            survey_number          => $self->survey_number,
            case_worker_id         => $self->case_worker_id,
            case_worker_first_name => $self->case_worker_first_name,
            case_worker_last_name  => $self->case_worker_last_name,
            case_worker_email      => $self->case_worker_email,
            focal_child_id         => $self->focal_child->id,
            focal_child_first_name => $self->focal_child->first_name,
            focal_child_last_name  => $self->focal_child->last_name,
            focal_child_dob        => $self->focal_child->dob,
        };

        my $pfc = $self->potential_focal_children;
        my $i   = 0;
        for my $child (@$pfc) {
            $i++;
            $row->{"child_${i}_id"}         = $child->id;
            $row->{"child_${i}_first_name"} = $child->first_name;
            $row->{"child_${i}_last_name"}  = $child->last_name;
            $row->{"child_${i}_dob"}        = $child->dob;
        }

        $i = 0;
        for my $adult ( @{ $self->adults_sorted } ) {
            $i++;
            $row->{"adult_${i}_id"}         = $adult->id;
            $row->{"adult_${i}_first_name"} = $adult->first_name;
            $row->{"adult_${i}_last_name"}  = $adult->last_name;
            $row->{"adult_${i}_dob"}        = $adult->dob;
            $row->{"adult_${i}_street_one"} = $adult->address_one;
            $row->{"adult_${i}_street_two"} = $adult->address_two;
            $row->{"adult_${i}_city"}       = $adult->city;
            $row->{"adult_${i}_state"}      = $adult->state;
            $row->{"adult_${i}_zipcode"}    = $adult->zipcode;
            $row->{"adult_${i}_phone"}      = $adult->preferred_phone;
            $row->{"adult_${i}_email"}      = $adult->email;
            $row->{"adult_${i}_role"}       = $adult->role;
        }

        return $row;
    }

    sub adults_sorted {
        my $self    = shift;
        my @mothers = grep { $_->role eq 'Mother' } @{ $self->adults };
        my @fathers = grep { $_->role eq 'Father' } @{ $self->adults };

        # id is not unique (alas) so we must de-dupe based on name and dob
        my %seen;
        my @sorted_uniq
            = grep { !$seen{ $_->unique_id }++ } ( @mothers, @fathers );

        # some names are "unknown" (case sensitive)
        return [ grep { $_->unique_id !~ /unknown/ } @sorted_uniq ];
    }

    sub eligible {
        my $self = shift;
        return 0 unless $self->focal_child;
        return 0 unless scalar( @{ $self->adults_sorted } ) > 0;

        # TODO skip already surveyed.
        return 1;
    }
}

{

    package Client;
    use Moo;

    has [
        qw(
            id
            last_name
            work_phone
            address_two
            case_id
            role
            email
            state
            first_name
            home_phone
            dob
            city
            sex
            mobile_phone
            address_one
            zipcode
            )
    ] => ( is => 'ro' );

    sub unique_id {
        my $self = shift;
        return lc( sprintf "%s-%s-%s-%s",
            $self->last_name, $self->first_name_only, $self->dob,
            $self->role );
    }

    sub first_name_only {
        my $self = shift;
        my $n    = $self->first_name;
        $n =~ s/\ \w\.?$//;
        return $n;
    }

    sub preferred_phone {
        my $self = shift;
        return
               $self->mobile_phone
            || $self->home_phone
            || $self->work_phone;
    }

    sub age {
        my $self = shift;
        return 0 unless $self->dob;
        my ($year) = ( $self->dob =~ m/^(\d+)-/ );
        return 2019 - $year;
    }
}

{

    package Adult;
    use Moo;

    extends 'Client';

}

{

    package Child;
    use Moo;

    extends 'Client';
}

{

    package CaseWorker;
    use Moo;
    use List::Util qw(shuffle);

    has id    => ( is => 'ro' );
    has cases => ( is => 'rw' );

    sub has_cases {
        my $self = shift;
        return scalar( @{ $self->cases } );
    }

    sub eligible_cases {
        my $self = shift;
        return [ grep { $_->eligible } @{ $self->cases } ];
    }

    sub random_cases {
        my $self = shift;
        my $count = shift || 2;

        my @shuffled = shuffle( @{ $self->eligible_cases } );
        return [ @shuffled[ 0 .. ( $count - 1 ) ] ];
    }
}

# unwind adults and children to group by case
my $case_groups = {};
for my $adult_id ( keys %$adults ) {
    my $adult = Adult->new( $adults->{$adult_id} );
    $case_groups->{ $adult->case_id }->{adults}->{ $adult->id } = $adult;
}
for my $child_id ( keys %$children ) {
    my $child = Child->new( $children->{$child_id} );
    $case_groups->{ $child->case_id }->{children}->{ $child->id }
        = $child;
}

#dump $case_groups;

# group cases by worker
my %worker_cases;
my %workers;
for my $case_id ( keys %$cases ) {
    my $case      = Case->new( $cases->{$case_id} );
    my $worker_id = $case->case_worker_id;

    if ( $case->case_worker_email =~ /example.com/ ) {
        warn sprintf( "Missing email for %s\n", $case->worker_name );
    }

    $case->adults(   [ values %{ $case_groups->{$case_id}->{adults} } ] );
    $case->children( [ values %{ $case_groups->{$case_id}->{children} } ] );

    push @{ $worker_cases{$worker_id} }, $case;
}

for my $worker_id ( keys %worker_cases ) {
    my $worker = CaseWorker->new( id => $worker_id );
    $worker->cases( $worker_cases{$worker_id} );
    $workers{$worker_id} = $worker;
}

#dump \%workers;

printf "Found %s case workers for %s cases\n", scalar( keys %workers ),
    scalar( keys %$cases );

# create the report
my $csv = Text::CSV_XS->new( { binary => 1, eol => $/, auto_diag => 1, } );
$csv->column_names($CSV_HEADER);
open my $fh, ">:encoding(utf8)", $TARGET_FILE or die "$TARGET_FILE: $!";
$csv->print( $fh, $CSV_HEADER );

my $num_rows     = 0;
my $max_children = 0;
my $max_adults   = 0;
for my $worker_id ( sort keys %workers ) {
    my $worker = $workers{$worker_id};
    next unless $worker->has_cases;

    for my $case ( @{ $worker->random_cases(2) } ) {
        next unless $case;    # if there were less than 2

        my $num_adults = scalar( @{ $case->adults_sorted } );
        my $num_pfc    = scalar( @{ $case->potential_focal_children } );

        $max_adults   = $num_adults if $num_adults > $max_adults;
        $max_children = $num_pfc    if $num_pfc > $max_children;

   #        printf "Random case for worker %s: %s\n", $worker_id, dump($case);
   #        printf "Focal child: %s\n", dump( $case->focal_child );

        $csv->print_hr( $fh, $case->as_csv_row );
        $num_rows++;
    }
}
close $fh or die "$TARGET_FILE: $!";
printf "Wrote %s rows to %s\n", $num_rows, $TARGET_FILE;
printf "Max potential focal children seen on a single case: %s\n",
    $max_children;
printf "Max adults seen on a single case: %s\n", $max_adults;
