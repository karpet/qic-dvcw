#!/usr/bin/env perl

use strict;
use warnings;
use Data::Dump qw( dump );
use Digest::SHA qw( sha256_hex );
use Struct::Diff qw(diff);
use Try::Tiny;
use FindBin;
use lib "$FindBin::Bin/../../lib";
use QIC::Case;
use QIC::CaseWorker;
use QIC::Adult;
use QIC::Child;
use QIC::Utils
    qw( clean_name clean_state clean_zip parse_date parse_date_ymd parse_date_mdy read_json write_json );

my $DEBUG = $ENV{DEBUG} || 0;
my $usage = "$0 datadir";
die $usage unless @ARGV;
my $DATA = shift(@ARGV);

{

    package TransformRole;
    use Moo::Role;

    sub transform {
        my $self = shift;
        return {%$self};
    }

}

{

    package Adult;
    use Moo;

    with 'TransformRole';

    has [qw( sha )] => ( is => 'rw' );

    has [
        qw(
            sex
            role
            dob
            case_id
            last_name
            middle_name
            first_name
            id
            client_id
            is_child
            address_one
            address_two
            city
            state
            zipcode
            mobile_phone
            home_phone
            email
            )
    ] => ( is => 'ro' );

    sub join_id {
        my $self = shift;
        return $self->id;
    }

    sub add_address {
        my ( $self, $addr ) = @_;
        $self->{address_one} = main::clean_name( $addr->{AD_STR_STD} );
        $self->{zipcode}     = main::clean_zip( $addr->{CD_ZIP} );
        $self->{state}       = main::clean_state( $addr->{CD_ST} );
        $self->{city}        = main::clean_name( $addr->{AD_CITY} );
    }
}

{

    package Child;
    use Moo;

    with 'TransformRole';

    has [
        qw(
            case_id
            client_id
            first_name
            last_name
            dob
            id)
    ] => ( is => 'ro' );

}

{

    package Case;
    use Moo;

    with 'TransformRole';

    has [qw( id case_worker_id )] => ( is => 'ro' );
}

{

    package CaseWorker;
    use Moo;

    with 'TransformRole';

    has [qw( id first_name last_name email site_name site_office_name )] =>
        ( is => 'ro' );

}

sub row_to_child {
    my $row      = shift;
    my $cycis_id = cycis_id($row);
    my $case_id  = $row->{SacwisCaseId} || $row->{"SACWIS ID"};
    return unless $case_id;

    return Child->new(
        dob =>
            parse_date( $row->{"DateOfBirth"} || $row->{"DT_OF_BIRTH"} ),
        first_name => clean_name( $row->{"FirstName"} || $row->{"NM_FRST"} ),
        last_name  => clean_name( $row->{"LastName"}  || $row->{"NM_LAST"} ),
        id         => $cycis_id,
        case_id    => $case_id,
        client_id =>
            join( '-', $case_id, ( $row->{"Person ID"} || $cycis_id ) ),
    );
}

# SACWISCaseId -> SACWIS ID

sub row_to_adult {
    my $row       = shift;
    my $case_id   = $row->{SacwisCaseId} || $row->{"SACWIS ID"};
    my $cycis_id  = cycis_id($row);
    my $person_id = $row->{"ID_PERS"} || $row->{"id_pers"} || $cycis_id;

    return Adult->new(
        {   dob        => parse_date( $row->{"DT_OF_BIRTH"} ),
            case_id    => $case_id,
            last_name  => clean_name( $row->{"NM_LAST"} ),
            first_name => clean_name( $row->{"NM_FRST"} ),
            id         => join( '-', $cycis_id, $person_id ),
            client_id  => join( '-', $case_id, $person_id ),
            role => "Adult",    # TODO missing data
            state => clean_state( $row->{"State"} || $row->{CD_ST} ),
            sha   => sha256_hex( dump($row) ),
        }
    );
}

sub row_to_case {
    my $case = shift;
    return Case->new(
        {   id             => $case->{"SACWIS ID"},
            case_worker_id => $case->{"WorkerId"},
        }
    );
}

sub row_to_case_worker {
    my $cw = shift;
    return CaseWorker->new(
        {   id               => $cw->{"WorkerId"},
            first_name       => clean_name( $cw->{"WorkerFirstName"} ) || "",
            last_name        => clean_name( $cw->{"WorkerLastName"} ) || "",
            site_office_name => $cw->{"CaseTeam"} || $cw->{"SubRegionName"},
        }
    );
}

sub find_address_for_case_id_and_name {
    my ( $first_name, $last_name, $cycis_id, $addresses ) = @_;

    for my $addr ( sort { $b->{effective_date} cmp $a->{effective_date} }
        @{ $addresses->{$cycis_id} } )
    {
        if (   lc( $addr->{adult_first_name} ) eq lc($first_name)
            && lc( $addr->{adult_last_name} ) eq lc($last_name) )
        {
            return $addr;
        }
    }

    return undef;
}

sub cycis_id {
    my $r = shift;
    return $r->{ID_CYCIS_CASE} || $r->{"CYCIS ID"} || $r->{CYCISCaseId};
}

# each row is an adult on a case
my $placement_cases_file = "$DATA/placement-cases.json";

# each row is a case
my $intact_cases_file = "$DATA/intact-cases.json";

# each row is a person associated with an intact case
my $intact_case_address_file = "$DATA/intact-members-address.json";

# each row is an email address for a person on a intact member
my $intact_case_emails_file = "$DATA/intact-members-emails.json";

# each row is an address for a person on a placement case
my $placement_case_address_file = "$DATA/placement-address.json";

# each row is a caseworker
my $caseworker_email_file = "$DATA/caseworker-emails.json";

my $caseworker_emails   = read_json($caseworker_email_file);
my $placement_cases     = read_json($placement_cases_file);
my $intact_cases        = read_json($intact_cases_file);
my $intact_addresses    = read_json($intact_case_address_file);
my $intact_emails       = read_json($intact_case_emails_file);
my $placement_addresses = read_json($placement_case_address_file);

##########################################################################################################################################
# Scott notes:
# Placement cases should be linked to Placement address by using CYCIS ID on Placement Cases to ID_CYCIS_CASE on Placement Address.
# The address tab will contain an address for each person with the CYCIS group.

# Intact Cases should be linked to Intact Members Address by using CYCISCaseID on Intact Cases to ID_CYCIS_CASE on Intact Members Address.
# The address tab will contain an address for each person with the CYCIS group.  So there are multiple addresses per CYCIS group.

# Intact Cases should be linked to Intact Members Emails by using CYCISCaseID on Intact Cases to ID_CYCIS_CASE on Intact Members Emails.
##########################################################################################################################################

# build out cases, adults, children
# clients are adults or children

my ( %cases, %case_workers, %adults, %childs );

my %location_lookup = ();
for my $pc (@$placement_cases) {
    next unless $pc->{"WorkerId"};
    $location_lookup{ $pc->{"WorkerId"} } = $pc->{Location};
}

my %email_lookup = ();
for my $cwe (@$caseworker_emails) {
    next unless $cwe->{last_name};
    next unless $cwe->{status} eq "1 - active";
    my $key = lc( $cwe->{last_name} . '-' . $cwe->{first_name} );
    $email_lookup{$key} = $cwe->{email};
}

my %address_lookup = ();    # case_id => [ addresses ]
my $address_count  = 0;
for my $addr (@$placement_addresses) {
    $addr->{adult_first_name} = clean_name( $addr->{NM_FRST} );
    $addr->{adult_last_name}  = clean_name( $addr->{NM_LAST} );
    $addr->{effective_date}   = parse_date_ymd( $addr->{DT_ADDR_EFF} );
    $addr->{cycis_id}         = cycis_id($addr);
    next unless $addr->{cycis_id};

    push @{ $address_lookup{ $addr->{cycis_id} } }, $addr;
    $address_count++;
}
printf "Found %s placement addresses for %s placement cases\n",
    $address_count,
    scalar( keys %address_lookup );

my %adult_emails = ();
for my $iemail (@$intact_emails) {
    my $id = cycis_id($iemail);
    next unless $id;
    $adult_emails{$id} = $iemail;
}

my $child_count       = 0;
my $adult_count       = 0;
my $found_address     = 0;
my %seen_case_worker  = ();
my %uniq_case_workers = ();
my %seen_adults       = ();

for my $case_hash (@$placement_cases) {
    my $case        = row_to_case($case_hash)        or next;
    my $case_worker = row_to_case_worker($case_hash) or next;
    my $child       = row_to_child($case_hash)       or next;
    my $adult       = row_to_adult($case_hash)       or next;

    my $case_id = $case_hash->{"SACWIS ID"};

    # skip nonsense
    next unless $case->id;

    my $cycis_id = cycis_id($case_hash);

    # case worker
    my $key = lc( $case_worker->last_name . '-' . $case_worker->first_name );

    $uniq_case_workers{$key}++;

    my $email = $email_lookup{$key};

    if ( !$email ) {

        #  warn "no email for $key : " . dump($case_worker->transform);
        printf( "No email for %s %s\n",
            $case_worker->first_name, $case_worker->last_name )
            unless $seen_case_worker{$key}++;
        next;
    }

    $case_worker->{email}             = $email;
    $case_worker->{site_office_name}  = $location_lookup{ $case_worker->id };
    $case_workers{ $case_worker->id } = $case_worker->transform;

    # case
    $cases{ $case->id } = $case->transform;

    # adult (unique per row)
    if ( $seen_adults{ $adult->id } && $DEBUG ) {

        warn "Already seen adult: " . dump $case_hash;
        warn "previously: " . dump $seen_adults{ $adult->id };
        warn "diff: "
            . dump( diff( $seen_adults{ $adult->id }, $case_hash ) );
    }
    $seen_adults{ $adult->id } = $case_hash;

    my $address = find_address_for_case_id_and_name(
        $adult->first_name, $adult->last_name,
        $cycis_id,          \%address_lookup
    );
    $adult->add_address($address) if $address;
    $found_address++ if $address;

    if ( $adult_emails{ $adult->id } ) {
        my $r = $adult_emails{ $adult->id };
        if (   clean_name( $r->{NM_LAST} ) eq $adult->last_name
            && clean_name( $r->{NM_FRST} ) eq $adult->first_name )
        {
            $adult->{email} = $r->{AD_EMAIL_ADDR};
        }
    }

    $adults{ $adult->id } = $adult->transform;
    $adult_count++;

    # child
    $childs{ $child->id } = $child->transform;
}

printf(
    "Found %s valid placement cases out of %s adult rows\n",
    scalar( keys %cases ),
    scalar(@$placement_cases)
);

# intact cases
my %intact_case_lookup = ();
for my $intact_case (@$intact_cases) {

    #    dump $intact_case;

    my $case_worker = row_to_case_worker($intact_case);
    my $key = lc( $case_worker->last_name . '-' . $case_worker->first_name );

    $uniq_case_workers{$key}++;

    my $email = $email_lookup{$key};

    if ( !$email ) {

        #  warn "no email for $key : " . dump($case_worker->transform);
        printf( "No email for %s %s\n",
            $case_worker->first_name, $case_worker->last_name )
            unless $seen_case_worker{$key}++;
        next;
    }

    $case_worker->{email} = $email;
    $case_worker->{site_office_name} ||= $location_lookup{ $case_worker->id };
    $case_workers{ $case_worker->id } = $case_worker->transform;

    my $intact_case_id = cycis_id($intact_case);
    $intact_case_lookup{$intact_case_id}
        = { case => $intact_case, case_worker => $case_worker };
}

printf(
    "Found %s valid intact cases out of %s\n",
    scalar( keys %intact_case_lookup ),
    scalar(@$intact_cases)
);

my $intact_case_count    = 0;
my %intact_address_dates = ();
for my $intact_member (@$intact_addresses) {
    my $case_id        = $intact_member->{SacwisCaseId};
    my $intact_case_id = cycis_id($intact_member);
    next unless $intact_case_id;

    my $intact_case = $intact_case_lookup{$intact_case_id};

    if ( !$intact_case ) {

        # warn "No intact case for $intact_case_id";
        next;
    }

    my $case = Case->new(
        id             => $case_id,
        case_worker_id => $intact_case->{case_worker}->id
    );
    $cases{ $case->id } = $case->transform;
    $intact_case_count++;

    # filter out bad dob/age
    next if $intact_member->{age} eq '99';

    # adults, children
    if ( $intact_member->{age} >= 18 ) {
        my $adult = row_to_adult($intact_member);

        # possible we have multiple adults with different addresses.
        # we want the most recent effective date to win.
        my $address_effective_date
            = parse_date_ymd( $intact_member->{DT_ADDR_EFF} );
        if (  !$intact_address_dates{ $adult->id }
            or $intact_address_dates{ $adult->id }
            lt $address_effective_date )
        {
            # prefer the newer one
            $intact_address_dates{ $adult->id } = $address_effective_date;
            $adult->add_address($intact_member);
            $adults{ $adult->id } = $adult->transform;
            $found_address++;
        }
        $adult_count++;
    }
    else {
        my $child = row_to_child($intact_member) or next;
        $childs{ $child->id } = $child->transform;
    }
}

printf( "Matched %s intact cases to clients\n", $intact_case_count );

# write out denormalized
write_json( "$DATA/adults-out.json",       \%adults );
write_json( "$DATA/children-out.json",     \%childs );
write_json( "$DATA/cases-out.json",        \%cases );
write_json( "$DATA/case_workers-out.json", \%case_workers );
write_json( "$DATA/address-out.json",      \%address_lookup );

#dump \%address_lookup;

my $case_worker_count       = scalar keys %case_workers;
my $case_worker_email_count = scalar keys %email_lookup;

printf
    "Processed %s adult parents, wrote %s unique adults, %s with address\n",
    $adult_count,
    scalar( keys %adults ), $found_address;

printf "Wrote %s unique children\n", scalar( keys %childs );
printf "Wrote %s total cases\n",     scalar( keys %cases );

printf
    "Processed %s unique case workers, from %s emails, wrote %s case workers\n",
    scalar( keys %uniq_case_workers ),
    $case_worker_email_count,
    scalar( keys %case_workers );

# write to db
QIC::DB->backup;

for my $cw_id ( keys %case_workers ) {
    my $cw_rec      = $case_workers{$cw_id};
    my $case_worker = QIC::CaseWorker->new(
        id               => $cw_id,
        first_name       => $cw_rec->{first_name},
        last_name        => $cw_rec->{last_name},
        email            => $cw_rec->{email},
        site_name        => 'illinois',
        site_office_name => $cw_rec->{site_office_name},
    )->insert_or_update;
}

for my $case_id ( keys %cases ) {
    my $case_rec = $cases{$case_id};
    my $case     = QIC::Case->new(
        id             => $case_id,
        case_worker_id => $case_rec->{case_worker_id}
    )->insert_or_update;
}

my @adult_columns = QIC::Adult->meta->column_names;
warn "Any errors below about 'DBD::SQLite::st execute failed' can be safely ignored\n";
for my $adult_id ( keys %adults ) {
    my $rec = $adults{$adult_id};

  # we changed the 'id' format so load first by client_id/case_id
  # in case we can find it more easily that way.
  # otherwise presence of 'id' will fail to find and die on unique constraint.
    my %attrs = map { $_ => $rec->{$_} } @adult_columns;
    try {
        my $adult = QIC::Adult->new(%attrs)->insert_or_update;
    }
    catch {
        my $err = $_;
        if ( $err
            =~ /UNIQUE constraint failed: adults.client_id, adults.case_id/ )
        {
            delete $attrs{id};
            my $adult = QIC::Adult->new(%attrs)->insert_or_update;
            $adult->id($adult_id);
            $adult->save;
        }
        else {
            die "Caught $err: " . dump $rec;
        }
    }
}
for my $child_id ( keys %childs ) {
    my $rec   = $childs{$child_id};
    my $child = QIC::Child->new(
        id         => $child_id,
        client_id  => $rec->{client_id},
        case_id    => $rec->{case_id},
        first_name => $rec->{first_name},
        last_name  => $rec->{last_name},
        dob        => $rec->{dob}
    )->insert_or_update;
}

warn "Success\n";
